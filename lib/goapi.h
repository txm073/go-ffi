/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package lib */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
extern size_t _GoStringLen(_GoString_ s);
extern const char *_GoStringPtr(_GoString_ s);
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "array.go"

#include "shared.h"

#line 1 "cgo-generated-wrapper"

#line 3 "hashmap.go"

#include "shared.h"

#line 1 "cgo-generated-wrapper"

#line 3 "lib.go"

#include "shared.h"

#line 1 "cgo-generated-wrapper"

#line 3 "request.go"

#include "shared.h"

#line 1 "cgo-generated-wrapper"

#line 3 "zip.go"

#include "shared.h"

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#if !defined(__cplusplus) || _MSVC_LANG <= 201402L
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
#include <complex>
typedef std::complex<float> GoComplex64;
typedef std::complex<double> GoComplex128;
#endif
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;/* Windows loader */

#include <Windows.h>

#define __mbErrorCaption "[hyprnova]: Fatal Error"
#define __goLibPath "goapi.dll"

inline HMODULE goapi = (HMODULE)NULL; // Library handle 

/* Function pointer definitions */

typedef int32_t (*go_insertElement_proto)(go_handle_t, type_t, int32_t, void*);
typedef int32_t (*go_setElement_proto)(go_handle_t, type_t, int32_t, void*);
typedef int32_t (*go_getElement_proto)(go_handle_t, type_t, int32_t, void*);
typedef int32_t (*go_getSliceLength_proto)(go_handle_t);
typedef go_handle_t (*go_createSlice_proto)(void);
typedef void (*go_deleteSlice_proto)(go_handle_t);
typedef int32_t (*go_getMapValue_proto)(go_handle_t, type_t, type_t, void*, void*);
typedef int32_t (*go_setMapValue_proto)(go_handle_t, type_t, type_t, void*, void*);
typedef go_handle_t (*go_createMap_proto)(void);
typedef void (*go_deleteMap_proto)(go_handle_t);
typedef int32_t (*testAdd_proto)(int32_t, int32_t);
typedef go_handle_t (*go_HttpClient_create_proto)(void);
typedef void (*go_HttpClient_delete_proto)(go_handle_t);
typedef int32_t (*go_HttpClient_newRequest_proto)(go_handle_t, GoString, GoString);
typedef int32_t (*go_HttpClient_setHeader_proto)(go_handle_t, GoString, GoString);
typedef int32_t (*go_HttpClient_setParam_proto)(go_handle_t, GoString, GoString);
typedef int32_t (*go_HttpClient_performRequest_proto)(go_handle_t, resp_t*);
typedef go_handle_t (*go_Archive_create_proto)(GoSlice);
typedef int32_t (*go_Archive_extract_proto)(go_handle_t, GoString, GoSlice);
typedef int32_t (*go_Archive_extractAll_proto)(go_handle_t, GoString);
typedef int32_t (*go_Archive_extractToDisk_proto)(go_handle_t, GoString, GoString);
typedef int64_t (*go_Archive_getFileSize_proto)(go_handle_t, GoString);
typedef void (*go_Archive_delete_proto)(go_handle_t);

/* Function declarations */

inline go_insertElement_proto go_insertElement;
inline go_setElement_proto go_setElement;
inline go_getElement_proto go_getElement;
inline go_getSliceLength_proto go_getSliceLength;
inline go_createSlice_proto go_createSlice;
inline go_deleteSlice_proto go_deleteSlice;
inline go_getMapValue_proto go_getMapValue;
inline go_setMapValue_proto go_setMapValue;
inline go_createMap_proto go_createMap;
inline go_deleteMap_proto go_deleteMap;
inline testAdd_proto testAdd;
inline go_HttpClient_create_proto go_HttpClient_create;
inline go_HttpClient_delete_proto go_HttpClient_delete;
inline go_HttpClient_newRequest_proto go_HttpClient_newRequest;
inline go_HttpClient_setHeader_proto go_HttpClient_setHeader;
inline go_HttpClient_setParam_proto go_HttpClient_setParam;
inline go_HttpClient_performRequest_proto go_HttpClient_performRequest;
inline go_Archive_create_proto go_Archive_create;
inline go_Archive_extract_proto go_Archive_extract;
inline go_Archive_extractAll_proto go_Archive_extractAll;
inline go_Archive_extractToDisk_proto go_Archive_extractToDisk;
inline go_Archive_getFileSize_proto go_Archive_getFileSize;
inline go_Archive_delete_proto go_Archive_delete;

/* Loader functions */

inline void messageAbort(const char* msg) {
  MessageBoxA(NULL, msg, __mbErrorCaption, MB_ICONERROR);
  exit(1);
}

inline void freeGoLibrary() {
  if (goapi != NULL)
    FreeLibrary(goapi);
}

inline void loadGoLibrary() {
  goapi = LoadLibraryA(__goLibPath);
  if (goapi == NULL)
    messageAbort("Failed to load Go library (" __goLibPath ")");
  go_insertElement = (go_insertElement_proto)GetProcAddress(goapi, "go_insertElement");
  if (go_insertElement == NULL)
    messageAbort("Failed to load symbol 'go_insertElement' from Go library (" __goLibPath ")");
  go_setElement = (go_setElement_proto)GetProcAddress(goapi, "go_setElement");
  if (go_setElement == NULL)
    messageAbort("Failed to load symbol 'go_setElement' from Go library (" __goLibPath ")");
  go_getElement = (go_getElement_proto)GetProcAddress(goapi, "go_getElement");
  if (go_getElement == NULL)
    messageAbort("Failed to load symbol 'go_getElement' from Go library (" __goLibPath ")");
  go_getSliceLength = (go_getSliceLength_proto)GetProcAddress(goapi, "go_getSliceLength");
  if (go_getSliceLength == NULL)
    messageAbort("Failed to load symbol 'go_getSliceLength' from Go library (" __goLibPath ")");
  go_createSlice = (go_createSlice_proto)GetProcAddress(goapi, "go_createSlice");
  if (go_createSlice == NULL)
    messageAbort("Failed to load symbol 'go_createSlice' from Go library (" __goLibPath ")");
  go_deleteSlice = (go_deleteSlice_proto)GetProcAddress(goapi, "go_deleteSlice");
  if (go_deleteSlice == NULL)
    messageAbort("Failed to load symbol 'go_deleteSlice' from Go library (" __goLibPath ")");
  go_getMapValue = (go_getMapValue_proto)GetProcAddress(goapi, "go_getMapValue");
  if (go_getMapValue == NULL)
    messageAbort("Failed to load symbol 'go_getMapValue' from Go library (" __goLibPath ")");
  go_setMapValue = (go_setMapValue_proto)GetProcAddress(goapi, "go_setMapValue");
  if (go_setMapValue == NULL)
    messageAbort("Failed to load symbol 'go_setMapValue' from Go library (" __goLibPath ")");
  go_createMap = (go_createMap_proto)GetProcAddress(goapi, "go_createMap");
  if (go_createMap == NULL)
    messageAbort("Failed to load symbol 'go_createMap' from Go library (" __goLibPath ")");
  go_deleteMap = (go_deleteMap_proto)GetProcAddress(goapi, "go_deleteMap");
  if (go_deleteMap == NULL)
    messageAbort("Failed to load symbol 'go_deleteMap' from Go library (" __goLibPath ")");
  testAdd = (testAdd_proto)GetProcAddress(goapi, "testAdd");
  if (testAdd == NULL)
    messageAbort("Failed to load symbol 'testAdd' from Go library (" __goLibPath ")");
  go_HttpClient_create = (go_HttpClient_create_proto)GetProcAddress(goapi, "go_HttpClient_create");
  if (go_HttpClient_create == NULL)
    messageAbort("Failed to load symbol 'go_HttpClient_create' from Go library (" __goLibPath ")");
  go_HttpClient_delete = (go_HttpClient_delete_proto)GetProcAddress(goapi, "go_HttpClient_delete");
  if (go_HttpClient_delete == NULL)
    messageAbort("Failed to load symbol 'go_HttpClient_delete' from Go library (" __goLibPath ")");
  go_HttpClient_newRequest = (go_HttpClient_newRequest_proto)GetProcAddress(goapi, "go_HttpClient_newRequest");
  if (go_HttpClient_newRequest == NULL)
    messageAbort("Failed to load symbol 'go_HttpClient_newRequest' from Go library (" __goLibPath ")");
  go_HttpClient_setHeader = (go_HttpClient_setHeader_proto)GetProcAddress(goapi, "go_HttpClient_setHeader");
  if (go_HttpClient_setHeader == NULL)
    messageAbort("Failed to load symbol 'go_HttpClient_setHeader' from Go library (" __goLibPath ")");
  go_HttpClient_setParam = (go_HttpClient_setParam_proto)GetProcAddress(goapi, "go_HttpClient_setParam");
  if (go_HttpClient_setParam == NULL)
    messageAbort("Failed to load symbol 'go_HttpClient_setParam' from Go library (" __goLibPath ")");
  go_HttpClient_performRequest = (go_HttpClient_performRequest_proto)GetProcAddress(goapi, "go_HttpClient_performRequest");
  if (go_HttpClient_performRequest == NULL)
    messageAbort("Failed to load symbol 'go_HttpClient_performRequest' from Go library (" __goLibPath ")");
  go_Archive_create = (go_Archive_create_proto)GetProcAddress(goapi, "go_Archive_create");
  if (go_Archive_create == NULL)
    messageAbort("Failed to load symbol 'go_Archive_create' from Go library (" __goLibPath ")");
  go_Archive_extract = (go_Archive_extract_proto)GetProcAddress(goapi, "go_Archive_extract");
  if (go_Archive_extract == NULL)
    messageAbort("Failed to load symbol 'go_Archive_extract' from Go library (" __goLibPath ")");
  go_Archive_extractAll = (go_Archive_extractAll_proto)GetProcAddress(goapi, "go_Archive_extractAll");
  if (go_Archive_extractAll == NULL)
    messageAbort("Failed to load symbol 'go_Archive_extractAll' from Go library (" __goLibPath ")");
  go_Archive_extractToDisk = (go_Archive_extractToDisk_proto)GetProcAddress(goapi, "go_Archive_extractToDisk");
  if (go_Archive_extractToDisk == NULL)
    messageAbort("Failed to load symbol 'go_Archive_extractToDisk' from Go library (" __goLibPath ")");
  go_Archive_getFileSize = (go_Archive_getFileSize_proto)GetProcAddress(goapi, "go_Archive_getFileSize");
  if (go_Archive_getFileSize == NULL)
    messageAbort("Failed to load symbol 'go_Archive_getFileSize' from Go library (" __goLibPath ")");
  go_Archive_delete = (go_Archive_delete_proto)GetProcAddress(goapi, "go_Archive_delete");
  if (go_Archive_delete == NULL)
    messageAbort("Failed to load symbol 'go_Archive_delete' from Go library (" __goLibPath ")");
}

#endif

